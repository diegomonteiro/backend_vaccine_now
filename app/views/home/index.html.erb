
<style>
    /*body {
    padding: 0;
    margin: 0;
    }
    html, body, #map {
        height: 100%;
        width: 100vw;
    }*/
    html, body {
    padding: 0;
    margin: 0;
    }

    #map{
        height: 480px;
        width: 100%;
    }

    .container-fluid {
        width: 100%;
        padding-right: 0px;
        padding-left: 0px;
        margin-right: auto;
        margin-left: auto;
    }
</style>


<div id="map"></div>

<script>

    var map = L.map('map').setView([-22.432, -44.432], 13).locate({setView: true, maxZoom: 16, watch: true});

    var vaccination_points = L.layerGroup();
    var user_positions = L.layerGroup();
    var bounds;

    startingPoint = {};

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
		attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
	}).addTo(map);
    
    map.on('locationfound', onLocationFound);
    map.on('locationerror', onLocationError);

    $(window).on("resize", function () {
        //console.log("Redefinir map");
        $("#map").height($(window).height()-50);
        map.invalidateSize();
        //plotar_situacao_atual(casos, caso_selecionado);

    }).trigger("resize");

    $(document).ready(function(){
        getVaccinationPoints();
        <% if user_signed_in?  %>
        getLocation("<%= current_user.id %>");
        <% end %>
    });

    function plotFakeUsers(number){
        bounds = map.getBounds();
        var southWest = bounds.getSouthWest();
        var northEast = bounds.getNorthEast();
        var lngSpan = northEast.lng - southWest.lng;
        var latSpan = northEast.lat - southWest.lat;

        pointsrand=[];

        for(var i=0;i<number;++i)
        {
            var point = [southWest.lat + latSpan * Math.random(),southWest.lng + lngSpan * Math.random()];
            pointsrand.push(point);

            user_positions.addLayer(L.marker(point).bindPopup("Sua localização é de " + 0 + " metros a partir deste ponto"));
        }

        console.log("Random Users: ", pointsrand);

    }

    function updateUserLocation(e){
        
        console.log("User Location: ",e);
        //updateCurrentLocation();
        <% if user_signed_in?  %>
        var data = {
            user_id: "<%= current_user.id %>",
            latitude: e.latitude,
            longitude: e.longitude,
            accuracy: e.accuracy
        }

        saveTrip(data);
        <% end %>
    }

    function onLocationFound(e) {
        var radius = e.accuracy;
        
        user_positions.clearLayers();

        var m = L.marker(e.latlng).bindPopup("Sua localização é de " + radius + " metros a partir deste ponto").openPopup();

        //var c = L.circle(e.latlng, radius);

        user_positions.addLayer(m);
        //user_positions.addLayer(c);

        user_positions.addTo(map);

        updateUserLocation(e);
    }

    function onLocationError(e) {
        //alert(e.message);
        console.log("Erro na Geolocalização: ", e);
    }

    function saveTrip(positionData){
        var token = $('meta[name="csrf-token"]').attr('content');

        var params = "user_position[user_id]="+positionData.user_id+"&";
        params += "user_position[latitude]="+positionData.latitude+"&";
        params += "user_position[longitude]="+positionData.longitude+"&";
        params += "user_position[accuracy]="+positionData.accuracy;

        $.ajax({
            url: "/user_positions",
            type: "post",
            dataType: "json",
            data: params,
            beforeSend: function(xhr){
                xhr.setRequestHeader('X-CSRF-Token', token);
            },
            success: function(response){
                console.log("Posição Registrada: ",response);
            },
            error: function(error){
                console.log("Erro ao atualizar posição do usuário: ", error);
            }
        })
    }

    function getPathByUser(user_id){
        $.ajax({
            url: "/user_positions.json",
            type: "GET",
            success: function(data){
                var vals = _.groupBy(data,function(o){ return o.user_id });

                $.each(vals[user_id], function(k,v){
                    //console.log("Posição em: ",v.updated_at,"=> ",v);
                    user_positions.addLayer(L.marker([v.latitude, v.longitude], {options: v}));
                });
            }
        })
    }

    function getCurrentLocation(){
        navigator.geolocation.getCurrentPosition(function(position) {
          <% if user_signed_in?  %>
          var data;
          data = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
            user_id: <%= current_user.id%>,
            accuracy: position.coords.accuracy
          };
          //return updateCurrentLocation(data);
          return saveTrip(data);
          <% end %>
        });
    }

    function getLocation(user){
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
            var coord, data, timestamp;
            coord = position.coords;
            timestamp = position.timestamp;
            data = {
                latitude: coord.latitude,
                longitude: coord.longitude,
                user_id: user,
                accuracy: coord.accuracy
            };
            startingPoint = data;

            //console.log("Location : ", data);
            return saveTrip(data);
            });
        }
    }

    function getVaccinationPoints(){
        $.ajax({
            url: "/vaccination_points.json",
            beforeSend: function(){
                //console.log("Preparing request of Vaccination Points");
                vaccination_points.clearLayers();
            },
            success: function(data){
                //console.log("Vaccination Points: ",data);

                $.each(data, function(k,v){
                    var style = getVaccinationPointStyle(v);

                    var remain_doses = _.sumBy(data.vaccinations, function(n){ return n.remain_doses });

                    var vaccination_point = L.circle([parseFloat(v.latitude), parseFloat(v.longitude)], {
                        radius: v.radius_km * 1000,
                        color: style.textColor,
                        fillColor: style.textColor,
                        fill: style.textColor,
                        fillOpacity: 0.1,
                        options: v
                    });

                    vaccination_points.addLayer(
                        L.marker({lat: parseFloat(v.latitude), lng: parseFloat(v.longitude)},
                        {
                            icon: L.BeautifyIcon.icon(style),
                            options: v
                        }).addTo(map));
                    vaccination_points.addLayer(vaccination_point);
                });

                vaccination_points.eachLayer(function (layer) {
                    var html = "";
                    
                    var remain_doses = _.sumBy(layer.options.options.vaccinations, function(n){ return n.remain_doses });
                    var total_doses  = _.sumBy(layer.options.options.vaccinations, function(n){ return n.total_doses });

                    html += "<span><b>"+layer.options.options.name+"</b></span><br/>";
                    html += "<hr/>";
                    html += "<span><b>Doses Disponíveis:</b> "+remain_doses+"<span><br/>";
                    html += "<span><b>Total de Doses:</b> "+total_doses+"<span><br/>";
                    html += "<span><b>Data Última Atualização:</b> "+layer.options.options.updated_at+"<span>";

                    html += "<hr/>";
                    html += "<a href='#' class='btn btn-success btn-sm btn-block' style='color: #ffffff'>Avise-me</a>";

                    layer.bindPopup(html);
                    //console.log("Renderizar Custom-Modal: ", layer);

                })

                vaccination_points.addTo(map);
            },
            error: function(error){
                console.error("Erro no Ponto de Vacinação: ", error);
            }
        })
    }

    function getVaccinationPointStyle(data){
        var remain_doses = _.sumBy(data.vaccinations, function(n){ return n.remain_doses });

        var options = {
            icon: data.vaccination_point_type.icon_class,
            borderColor: ((remain_doses > 0) ? 'green' : 'red'),
            textColor: ((remain_doses > 0) ? 'green' : 'red')
        }
        console.log("Style: ",data);

        return options;
    }

</script>